[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "DfE Git Academy",
    "section": "",
    "text": "Welcome to the DfE’s Git Academy. This is a collection of interactive tasks you can work through to help learn and practice using Git. Many use a supporting repository called git-academy-sandbox where you can practice using Git in a contained practice environment.\nYou should be able to follow through tasks in order to jump in at specific jump in points where you feel you need to target your learning.\nThis isn’t aimed at being a comprehensive reference guide however. If you need reference material for using Git in the DfE, then we recommend looking through the Azure DevOps for Analysis guide.\n\n\n\n Back to top",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "git-refresher/making-a-branch.html",
    "href": "git-refresher/making-a-branch.html",
    "title": "Making a new branch",
    "section": "",
    "text": "In a Git repository, different versions of work are controlled by using what are called “branches”. Edits can be made to files on a branch and those will not effect files on any other branch.\nMost repositories will have a “main” branch. This is considered the central latest working version of your work. When editing work, we generally don’t make edits directly on the main branch. Instead we create specific branches for specific chunks of work.\nHaving cloned the git-academy-sandbox repository, now make a new branch to work in.\n\nGit BashGitHub DesktopVS CodeRStudioPyCharm\n\n\nReplace &lt;github_id&gt; in the below with your GitHub username to make your own personal main branch in the sandbox repository.\ngit checkout -b &lt;github_id&gt;_main\n\n\nClick Branch in the menu bar and then select New branch… as shown in the screenshot below.\nThen enter your branch name as &lt;github_id&gt;_main (but replacing  with your own GitHub username, e.g. jsmith_main)\n\n\n\nCreating a new branch in GitHub Desktop\n\n\n\n\nThe current branch (main) should be listed in the very bottom left hand corner of the VS Code window frame. If you left click on this, you should then see a menu appear at the top of the VS Code window with some branch options (as shown in the screen shot below).\nClick + Create new branch… and then enter your branch name as &lt;github_id&gt;_main (but replacing  with your own GitHub username, e.g. jsmith_main).\nYou should now see the branch name listed in the bottom left of the window frame shown as the branch you just created, meaning any changes you currently make will be applied to that new branch (and not main).\n\n\n\nCreating a new branch in VS Code\n\n\n\n\nIn the Git panel, click the purple new branch symbol  as circled in the screenshot below.\nThen enter your branch name as &lt;github_id&gt;_main (but replacing  with your own GitHub username, e.g. jsmith_main)\n\n\n\nCreating a new branch in RStudio\n\n\n\n\nOpen up the Git panel in PyCharm and you should see something like the screenshot below. Right click on main and select New branch from ‘origin/main’….\nThen enter your branch name as &lt;github_id&gt;_main (but replacing  with your own GitHub username, e.g. jsmith_main).\n\n\n\nCreating a new branch in PyCharm\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Git basics refresher",
      "Making a new branch"
    ]
  },
  {
    "objectID": "ch1-introduction/aims-scope.html",
    "href": "ch1-introduction/aims-scope.html",
    "title": "Aims and scope",
    "section": "",
    "text": "Aims and scope\nGit Academy is intended to provide a pathway to learning how to use Git and DevOps, starting from beginner level, but with useful jumping in points up to and intermediate level.\nIt isn’t intended to be an exhaustive reference guide, more a development journey with sign-posting to useful resources that can help you pick up both a practical working knowledge of Git alongside a conceptual understanding of what it does and how it works.\nAs with git itself, there’ll be branching off points to explore different subjects so if there’s something specific you want to explore further beyond the basics, you should be able to do that.\nSome of the topics that we deal with are:\n\nthe basics of adding and committing, plus syncing between local and remote repos using push and pull\nusing branches - how to branch, when to branch, how to organise your work, how to merge branches and how to put in a review process using pull requests.\nHow to navigate your history / git tree and undo / revert changes.\nUsing DevOps to manage your workflows and the security of your remote repositories\nAutomating testing and deployments in DevOps\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "pre-requisites.html",
    "href": "pre-requisites.html",
    "title": "Pre-requisities",
    "section": "",
    "text": "Download Git from the Git website downloads page. Click the “Download for…” button in the monitor image and this will download the install script.\n\n\n\n\n\n\nTip\n\n\n\nThe install script asks lots of questions, but you’re generally fine to accept the defaults on all of these. The main one to watch out for is the default text editor, which Git sets to Vim. We strongly recommend changing this to Notepad or Notepad++ as Vim is very user-unfriendly for the average user.",
    "crumbs": [
      "Pre-requisities"
    ]
  },
  {
    "objectID": "pre-requisites.html#git",
    "href": "pre-requisites.html#git",
    "title": "Pre-requisities",
    "section": "",
    "text": "Download Git from the Git website downloads page. Click the “Download for…” button in the monitor image and this will download the install script.\n\n\n\n\n\n\nTip\n\n\n\nThe install script asks lots of questions, but you’re generally fine to accept the defaults on all of these. The main one to watch out for is the default text editor, which Git sets to Vim. We strongly recommend changing this to Notepad or Notepad++ as Vim is very user-unfriendly for the average user.",
    "crumbs": [
      "Pre-requisities"
    ]
  },
  {
    "objectID": "pre-requisites.html#github",
    "href": "pre-requisites.html#github",
    "title": "Pre-requisities",
    "section": "GitHub",
    "text": "GitHub\nYou’ll need a GitHub account to work through the examples used with our git-academy-sandbox repository.\nYou’ll then need to e-mail us with your GitHub username and ask to be added to the Git Academy users team on dfe-analytical services.",
    "crumbs": [
      "Pre-requisities"
    ]
  },
  {
    "objectID": "pre-requisites.html#running-git-commands",
    "href": "pre-requisites.html#running-git-commands",
    "title": "Pre-requisities",
    "section": "Running Git commands",
    "text": "Running Git commands\nThere are a few options for running Git commands once you’ve installed Git. The panels below give the most commonly used options that we recommend for working through Git Academy.\n\nGit BASHGitHub DesktopIDE Git integration\n\n\nGit BASH is a terminal prompt that you can use to run Git commands. It comes with Git, so you’ll have it as soon as you’ve installed Git. It gives you access to all Git commands as well as other system commands (such as creating files, navigating through your folders, making directories, removing files and many, many other things).\n\n\nIf writing commands into a terminal isn’t your thing, then a good (language-agnostic) alternative to Git BASH is to use the GitHub Desktop application. This can be downloaded from GitHub and provides access to a wide range of Git commands, whilst providing user-friendly views of the tracking status and changes of your files.\n\n\nMost modern IDEs (e.g. VS Code, R-Studio, PyCharm) provide some level of Git integration. IDEs often offer a more limited range of Git commands than Git BASH and GitHub Desktop, but work well for basic Git workflows (such as cloning, tracking changes, creating branches and syncing with your remote repository) and provide enough functionality to follow most of Git Academy without you needing to resort to typing commands into Git BASH.\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThere is no single preferred option for running Git commands. Whichever option you find works best for you is fine to use, whether it’s command line based or a graphical user interface. Some will offer additional functionality, but all shuould provide enough functionality for day-to-day tasks.",
    "crumbs": [
      "Pre-requisities"
    ]
  },
  {
    "objectID": "pre-requisites.html#text-editor-or-ide",
    "href": "pre-requisites.html#text-editor-or-ide",
    "title": "Pre-requisities",
    "section": "Text editor or IDE",
    "text": "Text editor or IDE\nWe’ve tried to keep Git Academy software-agnostic as much as possible, so you should be able to work through most of the material using any text editor or IDE. The main files you’ll need to edit will contain markdown, which you can edit in any of the following (some of which also provide Git integration).\n\nWindows NotepadVS CodeR-StudioPyCharm\n\n\nWindows Notepad and Notepad++ are good to use if you don’t have a preferred language that you’d usually work in such as R or Python. There’s no Git integration though, so you’ll need to use Git BASH or GitHub Desktop to run Git commands.\n\n\nVS Code is a flexible IDE usable with a range of languages and is available for use on DfE systems on request. It provides Git integration along with markdown file rendering (shortcut: Ctrl+K V), so is a great option for working through Git Academy.\n\n\nR-Studio is an R IDE and is available from the DfE Software Centre in Windows. It provides Git integration along with markdown file rendering, so is a great option for working through Git Academy.\n\n\nPyCharm Community Edition is a Python IDE and is available from the DfE Software Centre. It provides Git integration along with markdown file rendering, so is a great option for working through Git Academy.",
    "crumbs": [
      "Pre-requisities"
    ]
  },
  {
    "objectID": "ch1-introduction/git-versus-devops.html",
    "href": "ch1-introduction/git-versus-devops.html",
    "title": "DfE Git Academy",
    "section": "",
    "text": "Back to top"
  },
  {
    "objectID": "ch1-introduction/why-use-git.html",
    "href": "ch1-introduction/why-use-git.html",
    "title": "Why is Git important?",
    "section": "",
    "text": "Why is Git important?\nGit is a software that offers a comprehensive solution for collaborative work, version control, accountability, disaster recovery, and knowledge retention. Using Git strengthens QA practices and ensures you’re working in line with RAP principles. Here’s why Git holds particular importance for analysts in the civil service:\n\n\n\nCollaboration\n\n\nGit enables collaboration by allowing team members to work on the same project simultaneously from any location. It tracks changes made by each contributor, highlighting ‘conflicts’, before merging contributions into one final product. The ability to work on multiple branches simultaneously saves analysts time (no waiting for colleagues to finish one part before moving on). Cloud-hosted repositories also enable other analysts to view your code (with the correct permissions), enabling knowledge-sharing and transparency. Git’s collaborative features and online repository platforms enable automated checks and QA through pull requests/peer reviews, supporting compliance with the code of practice.\n\n\n\n\nExperiment\n\n\nGit’s ‘branching’ system creates parallel versions of projects, allowing analysts to experiment, try different approaches, or add potential new features without fear of breaking anything on the ‘main branch’.\n\n\n\n\nVersion control\n\n\nGit provides a version control system that keeps a historical record of all changes made to files in the repository. Analysts can easily revert to previous versions/past methodologies, compare changes, and identify the source of any issues. Git best practices (regular commits, useful branch names and commit messages) ensure that analysts can easily track and manage changes, allowing them to focus more on analysis and less on document management.\n\n\n\n\nAudit trails and accountability\n\n\nGit’s commit history and branching system create an audit trail of every change made to a project, and who made it. This audit trail helps analysts demonstrate the evolution of their work, which is essential when justifying decisions, responding to inquiries, or conducting internal reviews. The visible history removes uncertainty and again saves time otherwise spent figuring out what changes others made. Git’s commit messages simplify the process of justifying decisions, responding to inquiries, and conducting internal reviews, streamlining daily tasks. This also aids QA as it links closely to the key outcomes of the DfE QA framework (i.e. analysis is transparent and accountable).\n\n\n\n\nDisaster recovery\n\n\nData loss or file corruption can have severe consequences in the civil service, where data integrity is critical. I’m sure we’ve all had tech-disasters where we’ve lost the files/code scripts we spent the whole day working on! Git repositories can be hosted on remote servers or cloud platforms, ensuring that data is safely stored and backed up. Committing work regularly (every 30 minutes) ensures it never gets lost, as every commit is recoverable. In DfE we use Azure DevOps for internal/sensitive repositories and GitHub for public repositories. This minimizes the risk of data loss due to hardware failures or other unforeseen events, providing peace of mind for analysts and their supervisors, knowing that their work is safeguarded against corruption or unforeseen events.\n\n\n\n\nSkills development\n\n\nGit is a widely used tool in the tech industry and beyond in both public and private sectors. Learning Git not only benefits analysts in their current roles but also enhances their future career prospects. As the civil service increasingly incorporates technology and data-driven approaches, proficiency in Git can open doors to a broader range of opportunities within and outside the government sector.\n\n\n\n\nKnowledge loss & high turnover\n\n\nHigh-turnover rates and knowledge loss are common challenges in the civil service. Git’s audit trails and commit messages serve as a knowledge repository, preserving the history of decisions, methodologies, and changes. When new analysts join the team, this historical context proves invaluable in supporting their onboarding process and reducing the knowledge gap.\n\nIn summary, Git is an essential tool for analysts in the civil service because it facilitates collaborative work, ensures version control, maintains accountability and audit trails, supports disaster recovery, and promotes skill development. Embracing Git as part of their toolkit empowers civil service analysts to work more efficiently, maintain data integrity, and adapt to the evolving demands of the modern public sector.\n\n\n\n\n Back to top"
  },
  {
    "objectID": "git-refresher/clone-a-repo.html#introduction",
    "href": "git-refresher/clone-a-repo.html#introduction",
    "title": "Cloning an Existing Repository",
    "section": "Introduction",
    "text": "Introduction\nThis section will guide you through the process of cloning a GitHub repository (repo). A repo contains all of your code, your files and each file’s version history. Repos can have multiple collaborators and can be either private or public. You can find out more about GitHub repos on GitHub Docs.\nIf you have a repo on Azure DevOps, GitHub or GitLab, you generally can’t edit or run your work on those platforms, so if you need to work with the contents of a repo, you’ll usually need to make a clone.\nThere are several ways to clone an existing repo. Below, you’ll find two methods. The first uses Rstudio and the second uses Git Bash. Start with step 1, which is the same for both methods, and then decide which method to follow. Once you have successfully cloned, you should see the files appear in the location you have chosen to store your repo.",
    "crumbs": [
      "Git basics refresher",
      "Cloning an Existing Repository"
    ]
  },
  {
    "objectID": "git-refresher/clone-a-repo.html#step-1-get-the-repository-clone-link",
    "href": "git-refresher/clone-a-repo.html#step-1-get-the-repository-clone-link",
    "title": "Cloning an Existing Repository",
    "section": "Step 1: Get the repository clone link",
    "text": "Step 1: Get the repository clone link\na. Go to the git-academy-sandbox repository page on GitHub.\nb. Click the “Code” button and copy the URL (HTTPS link).\n\nTo Clone Using Git Bash:Or, to Clone Using RStudio:\n\n\n\nStep 2a: Open folder and Git Bash\nNavigate to the folder on your device where you want to clone the repo. Right-click in the directory and select “Git Bash Here”.\n\n\n\nStep 2b: Clone the Repository in Git Bash\n\nIn the Git Bash window that opens, use the `git clone` command followed by the URL you copied from GitHub. For this repo, we would enter:\n\ngit clone https://github.com/dfe-analytical-services/git-academy-sandbox.git\nYou will need to right-click to paste, as the keyboard shortcut will not work in Git Bash and then press enter.\n\n\nStep 2c: Verify the clone in Git Bash\n\nNavigate into the repo by typing cd git-academy-sandbox and pressing enter.\nYou should now see the current branch name (e.g. main) at the end of the file path as below:\n\n\n\n\n\n\n\nType git log and press enter to view recent commits. Press q when you are ready to exit git log.\nType git status and press enter to check the state of the cloned repository (at this point, it should say everything is up to date, as you haven’t made any changes yet).\n\n\n\n\n\nStep 2a: Open RStudio\nOpen RStudio on your device.\n\n\nStep 2b: Clone the Repository in RStudio\n\nIn RStudio, go to File &gt; New Project &gt; Version Control &gt; Git.\nPaste the URL you copied from GitHub into the “Repository URL” field.\nChoose a directory on your device where you want to save the repo.\nClick “Create Project”.\n\n\n\n\nStep 2c: Verify the Clone\nCheck the Files pane in RStudio to see if the repo files have been cloned to your local machine. The files pane normally opens in the right-hand bottom corner of RStudio.",
    "crumbs": [
      "Git basics refresher",
      "Cloning an Existing Repository"
    ]
  },
  {
    "objectID": "git-refresher/clone-a-repo.html#conclusion",
    "href": "git-refresher/clone-a-repo.html#conclusion",
    "title": "Cloning an Existing Repository",
    "section": "Conclusion",
    "text": "Conclusion\nYou have successfully cloned a GitHub repository! Continue on to learn how to create branches.",
    "crumbs": [
      "Git basics refresher",
      "Cloning an Existing Repository"
    ]
  }
]