---
title: "Recording changes (add and commit)"
---

This section will guide you through recording changes you make to your repo through the process of [**adding**](../glossary.html#add) and [**committing**](../glossary.html#commit) files. 

These steps help you manage and track changes in your project, making collaboration and version control efficient and reliable.

Having [created your own branch](making-a-branch.html), you should now record this change in the logbook provided in the git-academy-sandbox repository. This will mean you have recorded your progress so far, and made a change to a file which you can then practice recording. Follow the instructions below to make and record changes in your repo.

::: callout-caution
## Edit your git-academy-log file

-   Open your `git-academy-log.md` file. You can do this either in the file explorer pane of the software you are using, or by double clicking on the file in the folder you have saved it in locally. 

-   Put an x inside the brackets for the "Clone git-academy-sandbox" and "Create a new branch (\<github_username\>/main)".

-   Save the file.
:::

::: panel-tabset
## Git Bash

-   **Stage** the changes you want to commit by using one of the commands below.

    -   To add changes to one file at a time:

        `git add git-academy-log.md`

    OR

    -   To add all changes:

        `git add .`

- **Commit** changes with a message by entering:

    `git commit -m "Checked clone sandbox and make new branch tasks"`

:::: callout-tip
At any point in the above steps, you can use the command `git status` to check on the status of any files with un-committed changes in your repository.
::::


## RStudio

-   In the Git panel of RStudio (see image below), tick the files you want to record the changes for.
-   Click the commit button. It has a tick mark on two sheets of paper.

![](images/r_commit.png){fig-alt="Higlighting the Commit button and an example of ticking changes in the Git panel in RStudio."}

-   Write a short message to describe the changes you made.

-   Click "Commit".

![](images/r_commit_msg.png){fig-alt="Highlighting the commit message section and the Commit button in the RStudio: Review Changes pop up window that appears after completeing the last step."}

Note that you can see the changes made by comparing the green (current version) and the red (old version) highlighted sections.

## GitHub Desktop

## VS Code
-  In the Source Control panel of VSCode, click the plus on the file to 'stage' it. (see image below.)
Then write in your message above the big blue commit button, then click commit when you are ready.

![](images/vscode_commit.png){fig-alt='Shows the user the + button to stage a file, as well as the location of the Source Control panel.'}

You can view what has been added in green and what has been removed in red. (also shown with + and -)

## PyCharm

-   Click on the branches drop down menu at the top of the screen and click "Commit".

OR

-   Click on the symbol that shows a circle flanked by two lines in the sidebar as shown in the image below.

![](images/pycharm_commit.png){fig-alt="Highlighting the two ways to open the commit window." width="66%" fig-align="center"}

-   In the "Commit" pop up window, tick the files you wish to record changes for if they're not already ticked.

-   Write a short message to describe the changes you made.

-   Click "Commit".

![](images/pycharm_commit_msg.png){fig-alt="Highlighting the commit message section and the Commit button in the Commit pop up window that appears after completeing the last step."}

:::
